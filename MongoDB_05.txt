## Data Modeling
#####################################################
## MongoDB에서 논리적 구조를 설계할때 고려해야할 Data Modeling의 주요특징

# MongoDB는 데이터와 프로세스 모두가 설계의 중심임
# 파일시스템을 이용한 데이터 저장기술은 기업의 업무적프로세스 중심으로 데이터를 해석하고 구조를 설계
# 데이터베이스 관리시스템을 이용한 방법은 기업에서 발생하는 데이터를 중심으로 분석, 설계
# 둠으로 유연한 데이터 구조를 설계할 수 있고 관리할 수 있음

# Rich Document Structure를 제공
# 일부 데이터 중복이 발생한다 하더라도 빠른 데이터처리 및 효율적인 관리가 보장된다면 비 정규화된 설계구조도 하나의 설계방법에 유용

# MongoDB는 Join을 하지않음
# 중첩데이터 구조를 설계할 수 있기 때문에 불필요한 조인을 최소화할 수 있음

# MongoDB는 N : M 관계를 지원함

# MongoDB는 스키마 중심의 설계를 하지않음
# MongoDB는 사용자계정은 오직 인증의 의미만을 가지고 있으며 스키마를 고려한 설계를 할 필요가 없음

#####################################################
## MongoDB를 구축하기 위한 설계기준

# 데이터 조작은 어떻게 하는가?
# 하나의 Collection은 여러개의 필드로 구성됨
# 다양한 필드들을 하나의 Collection으로 생성하게 되면 불필요하게 메모리, CPU와 같은 시스템 자원을 낭비하게 되고 시스템 성능을 저하시키는 원인이 될 수 있음

# ACCESS PATTERN은 어떤가?
# 빅데이터 쓰기작업이 빈번한 Collection을 여러개로 분리 설계하면 초당 몇만건의 데이터를 빠르게 저장하는데 한계가 존재할 수 있음
# 빅데이터 읽기작업이 빈번한 필드들을 여러개의 Collection으로 분리설계하면 성능이 저하될 수 있음
# 이러한 문제점을 고려해서 설계해야 함

# SCHEMA 설계 시 고려사항은?
# 기업의 데이터는 업무적성격에 따라 다양성을 가지고있음, 다양성에 맞는 데이터구조를 설계해야함
# 그러기위해 MongoDB의 데이터 저장기술에 대한 명확한 이해가 필요

#####################################################
## Embedded Document ( RichDocument ) 
# MongoDB는 관계형 데이터베이스와 다르가 조인 문장을 사용하지 않음
# Document안에 Document가 있음 ( 내장형 도큐먼트 )

## Extent Document ( RichDocument ) 
# 확장형 도큐먼트는 Collection에 데이터를 저장한후 추가로 데이터를 추가시키는 방법
# 내장형 도큐먼트는 데이터를 저장할때 필드에 배열을 통해 정보를 내장시키는 방법

## Rich Document의 장단점
# 장점 : 쿼리가 단순해지고 Join이 없기때문에 도큐먼트 단위의 데이터 저장이 효과적이며 빠른 성능이 보장됨, 보안에 효과적
# 단점 : Embedded 되는 도큐먼트의 크기는 최대 16MB범위에서 가능
#         Embedded 되는 도큐먼트가 존재하지 않는 컬렉션에는 적합하지 않음
# 강한 관계를 가지는 Collection에는 유리하지만, 약한관계를 가진 Collection에는 Rich Document는 절대적으로 불리함

#####################################################
## Link
# MongoDB는 ObjectId를 통해 연결고리를 설정하기때문에 관계형데이터베이스의 공통컬럼과는 다름
# 동일한 Object ID를 가진 Document 검색
db.ord_detail.findOne( {ordid_id : o._id} )

## DBRef 함수를 이용한 Link
# DBRef 함수를 이용하여 주문 컬렉션 Object_ID 정보를 저장
ordid_id : [ new DBRef ( "ord", x._id ) ]

## Link 구조의 장단점
# 장점 : 별도의 논리적 구조로 저장되기 때문에 도큐먼트 크기에 재한 받지 않음
#         비즈니스 룰 상 별도로 처리되는 데이터 구조에 적합
# 단점 : 매번 논리적 구조 간에 Link를 해야하기 때문에 Embedded보다 성능이 떨어짐
#         컬렉션 개수가 증가하며 관리비용이 많이듬

#####################################################
## N : M 관계 패턴
# 빅데이터가 발생하는 다양한 비정형데이터 구조가 발생할 수 있지만 관계형 데이터베이스에서는 구현할 수 없음
# 관계형 데이터베이스는 N:M관계는 1:N관계로 재해석됨
# MongoDB는 N : M 관계 구조를 제공

#####################################################
## 상속 패턴
# MongoDB는 객체지향 데이터베이스처럼 직접 상속받는 데이터 구조와 달리 TYPE이라는 구분속성에 의해 속성이 결정되는 데이터 구조로 생성됨
# MongoDB에서는 공통속성들로 하나의 KEY를 설정하고 TYPE을 통해 요구되는 장치에 대한 필드를 설계함
# 비정형화 데이터 ( 컬럼을 일일이 정의할 필요가 없음 ) 때문에 유연한 데이터 구조를 설계할 수 있음

