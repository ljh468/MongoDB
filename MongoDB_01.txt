----------------------------MongoDB 3_1page----------------------------
// mongoDB내에 생성되어 있는 데이터베이스의 상태를 확인함
show dbs
// test db로 이동
use test
// 현재 데이터베이스를 삭제함
db.dropDatabase()
// 데이터가 저장되어 있는 논리적구조( Collection) 전체현황 확인
db.stats()
// 데이터베이스 인스턴스 종료
use admin
db.shutdownServer()
// 클라이언트 접속해제
db.logout()
// DB Collections 목록 조회
show collections
// 해당 Collection 삭제
db.employees.drop() -- employees 컬렉션 삭제

############################################################
----------------------------------- Insert 방법 -----------------------------------
############################################################

// MongoDB는 JSON 타입으로 데이터를 표현
m = {ename : "smith"}
n = {empno : 11}
// 데이터 저장시 save 메서드 사용
db.things.save(m)
db.things.save(n)
// Collection에 저장된 데이터를 검색할때 Find메서드 실행
db.things.find()
// 데이터 입력할 때 insert메서드를 사용할 수 있음
db.things.insert( {empno: 1102, ename: "king"} )
// 반복문들 통해 증가된 값을 n필드에 적용하여 데이터에 저장
for(var n = 1103; n<=1120; n++) db.things.save( {n : n, m : "test"} )

// insertOne은 Document 하나를 생성하는 명령어
db.user.insertOne( {username : "karoid", password : "1111"} )
db.user.insertOne( {username : "hello" , password : "1111"} )
// 알아보기 쉽게 정리해서 보여주는 pretty() 명령어
db.user.find().pretty()

// insertMany는 둘이상의 Doxument를 생성할때 사용하는 명령어
db.user.insertMany( [
{ username : "John", password : "4321" },
{ username : "K" , password : "4221" },
{ username : "Mark", password : "5321"}
] )

// find 명령어를 통해 Document를 조회
db.containerBox.find ( {category : "toy", name : "teddy bear" } )
--> category 가 toy 이고 name 이 teddy bear인 객체를 조회

// Object 안에 들어있는 값을 불러오기 위해서는 점연산자를 이용해 접근이 가능함
var myVar = { hello : "world"}
myVar.hello  -> world 조회됨
var a = { name : {firstName : "Karoid", lastName : "jeong" } }
a.name.firstName -> Karoid 조회됨

// find 명령어를 실행하면 batch라는 곳(101개)에 검색한 결과를 모아 놓음
// 20개씩 커서(Cursor)가 가리킴
for( i=0; i<1000; i++) {
db.cappedCollection.insertOne( { x : i } )
}
db.cappedCollection.find()
cursor.next()
cursor.hasNext()
// toArray()메소드는 find()문의 모든 결과를 담은 배열을 반환함
db.cappedCollection.find().toArray()

############################################################
----------------------------------- update 방법 -----------------------------------
############################################################

// 데이터를 변경하는 방법은  update와 save 메서드를 사용할 수 있음
db.things.update( { n : 1103 }, { $set : { ename : "standford" , dept : "research" } } )
db.things.update( { n : 1104 }, { $set : { ename : "Jone", dept : "inventory" } } )
db.things.update( { n : 1105 }, { $set : { ename : "Joe" , dept : "accounting" } } )
db.things.update( { n : 1106 }, { $set : { ename : "king", dept : "research" } } )
db.things.update( { n : 1107 }, { $set : { ename : "adams", dept : "personel" } } )
db.things.update( { n : 1108 }, { $set : { ename : "blake", dept : "inventory" } } )
db.things.update( { n : 1109 }, { $set : { ename : "smite", dept : "accounting" } } )
db.things.update( { n : 1110 }, { $set : { ename : "allen", dept : "reserch" } } )
db.things.update( { n : 1111 }, { $set : { ename : "ward", dept : "accounting" } } )
db.things.update( { n : 1112 }, { $set : { ename : "Jones", dept : "inventory" } } )
db.things.update( { n : 1113 }, { $set : { ename : "martin", dept : "research" } } )
db.things.update( { n : 1114 }, { $set : { ename : "clark", dept : "personal" } } )
db.things.update( { n : 1115 }, { $set : { ename : "tunner", dept : "accounting" } } )
db.things.update( { n : 1116 }, { $set : { ename : "martin", dept : "inventory" } } )
db.things.update( { n : 1117 }, { $set : { ename : "tod", dept : "human resource" } } )
db.things.update( { n : 1118 }, { $set : { ename : "Jimmy", dept : "research" } } )
db.things.update( { n : 1119 }, { $set : { ename : "clief", dept : "human resource" } } )
db.things.update( { n : 1120 }, { $set : { ename : "miler", dept : "personel" } } )
db.things.save ( { empno : 1101, ename : "Blake", dept : "account" } )

// updateOne, updateMany는 Document수정 명령어임
db.containerBox.find(null, {_id : false})
// updateMany는 검색되는 모든 Document를 수정함
db.containerBox.updateMany( { name : "bear" }, { $set : {name : "teddy bear", category : "toy" } }
--> name이 bear인 객체를 name은 teddy bear로 category는 toy로 수정

// 점연산자를 이용하여 inventory 필드안의 penElem이라는 요소를 pencil로 수정
db.character.insertMany ( [
{ name : 'x', inventory : [ 'pen', 'cloth', 'pen' ] },
{ name : 'y', inventory : [ 'book', 'cloth' ] , position : { x : 1, y : 5 } },
{ name : 'z', inventory : [ 'wood', 'pen' ] , position : { x : 0, y : 9 } }
] )
★★★★★★★★★★★★★★★★★★★★★★
inventory안의 pen요소를 pencil로 수정
db.character.updateMany( { }, {
$set : { "inventory.$[penElem]" : "pencil" } },
{arrayFilters : [{ penElem : 'pen' }]
} )
★★★★★★★★★★★★★★★★★★★★★★

// replaceOne 명령어는 Document를 찾아서 Document를 교체하는 명령어
// 수정이 아니라 교체, 기존의 내용이 모두 사라짐, id는 바뀌지 않음
db.user.replaceOne( { username : "Karoid"}, 
{  username : "Karpoid",
   status : "Sleep", 
   points : 100,
   password : 2222
} ) ;

// upsert는 참값으로 설정된 경우 Document가 없다면, 쿼리 내용으로 Document를 생성하여 수정
db.myCollection.replaceOne( { item : "abc123" },
{
item : "abc123",
staus : "p", 
points : 100,
},
{ upsert : true }
);

----------------------------3_27page----------------------------