## ReplicaSet

# 하나의 서버와 동일한 구조를 가진 또다른 서버에 동일한 데이터가 입력, 수정, 삭제된다면 메인서버에 장애가 발생하여도
# 복제 서버를 이용하여 메인서버를 빠르게 복구 할 수 있음
# 리프리카(Replica) 기능은 빅데이터의 백업을 통해 안정성을 보장하기 위한 솔루션임
# 1개의 마스터노드와 3개의 슬레이브 노드가 적정
# 장애가 발생하면 복제본 데이터베이슬 통한 복구 작업을 수행할 수 있음 (그러나 실시간 복구는 안됨)
# 리프리카셋은 프라이머리 서버에 장애가 발생하면 세컨더리 서버가 대체 해줌

## 리프리카 셋이 작동하는 절차
# 1. Aplication을 통해 프라이머리 서버에 Write작업이 발생
# 2. Memory Cache Area에 데이터 저장
# 3. 프라이머리 서버가 작동되지 않는 경우 Get Last Error가 발생
# 4. 로그데이터를 저널파일에 백업함
# 5. Aplication에 장애 발생 알림
# 6. 세컨더리 서버로 복제 작업을 수행
# 7. Aplication에 장애 발생 알림

## 리프리카 셋 주요 특징
# 리프리카셋의 프라이머리 서버는 매 2초마다 세컨더리 서버의 상태를 체크하며 동기화를 위한 HeartBeat작업을 수행
# 만약 세컨더리서버의 작업이 중지되더라도 복제작업만 중지될뿐 프라이머리 서버에 대한 읽기 작업은 수행함
# 만약 세컨더리 서버가 중지되면 세컨더리 서버가 프라이머리 서버가 됨
# OpLog는 복제작업을 수행하다 장애가 발생하면 추후에 세컨더리서버로 반영하기 위해 데이터를 백업 함

## Priority
# 리프리카로 구성된 환경에서 프라이머리 서버에 장애가 발생하면 10초이내 다음 프라이머리 서버가 되어야할 노드 하나를 선택
# 아비타 서버가 활성화되있으면 아비타가 적절한 서버를 선택해줌
# 사용자가 각 서버에 대한 우선순위를 설정해 둔 경우에는 가장 높은 값을 부여 받은 서버가 프라이머리 서버가 됨
conf = {
_id : "rptmongo", 
members : [
{_id : 0, host : "server_a : 10001", priority : 3 },
{_id : 0, host : "server_a : 10002", priority : 1 }, 
{_id : 0, host : "server_a : 10004", priority : 2 },
{_id : 0, host : "server_a : 10005", hidden : true, slaveDelay : 1800 },
] }
rs.initiate(conf)

################################################################
## 맴버의 유형
# Secondary Only Member
# 데이터를 저장하고 있지만 프라이머리 서버가 될수 없는 Only Secondary 서버를 의미함
cfg = rs.conf()
cfg.members[0].priority = 0
cfg.members[1].priority = 0.5
cfg.members[2].priority = 1
cfg.members[3].priority = 2
rs.reconfig(cfg)

# Hidden Member
# Client Application을 위한 숨겨진 멤버임
cfg = rs.conf()
cfg.members[0].priority = true
rs.reconfig(cfg)

# Arbiter Member
# 데이터 저장이 없고 오직 장애발생시 프라이머리 서버를 선출하기 위해 투표시에만 사용됨
rs.initiate( {
_id : "rptmong",
members : [
{ "_id" " 1, "host" : "localhost : 10001" },
{ "_id" " 2, "host" : "localhost : 10002" },
{ "_id" " 3, "host" : "localhost : 10003", arbiterOnly : true }
]
} )

# Delayed Member
# 프라이버리 서버의 OpLog정보에 정의된 시간동안 세컨더리 서버에 적용하지 않고 Delay한 후 적용할 때 사용됨
cfg = rs.conf()
cfg.members[0].slaveDelay = 3600
rs.reconfig(cfg)

# Non Voting Member
# 사용자 데이터를 저장하고 있지만 투표시 프라이머리 서버로 선택되지 않는 멤버임
cfg = rs.conf()
cfg.members[3].votes = 0

## 리프리카 셋 구성원의 기능
# 프라이머리 서버
# 클라이언트와 정보교환, 정보저장 O, 선거에서 문제발생
# 세컨더리 서버
# 프라이머리 정보 복제, 정보저장 O, 피선거권,선거권보유
# 아비터
# 투표 진행, 정보저장 X, 선거권보유

################################################################
## 리프리카셋을 설정하는 방법
# 리프리카셋으로 생성될 프라이머리와 세컨더리가 저장될 곳 생성, 아비타 DB가 저장될곳 생성
cd c:\mongodb
mkdir disk1
mkdir disk2
mkdir arbit

mongod --dbpath c:\mongodb\disk1 --port 10001 --bind_ip localhost --replSet rptmongo --oplogSize 10
mongod --dbpath c:\mongodb\disk2 --port 10002 --bind_ip localhost --replSet rptmongo --oplogSize 10
mongod --dbpath c:\mongodb\arbit --port 10003 --bind_ip localhost --replSet rptmongo --oplogSize 10

# replSetInitiate로 리프리카셋 초기화
cd /mongodb/bin
mongo localhost:10001/admin
db.rumCommand( { "replSetInitiate" : { "_id" : "rptmongo", "members" :
[ {"_id" : 1, "host" : "localhost : 10001" },
  {"_id" : 2, "host" : "localhost : 10002" },
  {"_id" : 3, "host" : "localhost : 10003" , arbiterOnly : true }
] } } )

################################################################
## Fail Over
# 프라이머리 서버 노드에 장애가 발생하는 경우 세컨더리 서버가 프라이머리 서버로 Fail over되는 기능에 대한 환경 설정 방법
mongo localhost:10001/admin
# 리프리카셋 환경정보 확인
db.printRelicationInfo()
# 첫번째 프라이머리 서버를 종료하면 두번째 세컨더리 서버가 프라이머리가 됨
db.shutdownServer()
mongo localhost:10002/admin
-> 10001번이 죽었기 때문에 10002가 primary 가 됨

# 장애가 발생했던 시스템을 복구하면 세컨더리 서버로 활성화됨
mongo --dbpath c:\mongodb\disk1 --port 10001 --replSet rptmongo --oplogSize 10

# 아비터 서버 상태 확인
mongo localhost:10003/admin
ARBITER

# 리프리카셋 상세정보 확인
rs.status()

# 새로운 복제서버를 추가하고 삭제함
mkdir disk3
mongod --dbpath c:\mongodb\dis3 --port 10004 --replSet rptmongo --oplogSize 10
cd c:\mongodb\bin
mongo localhost :10002/admin
db.printSlaveReplicationInfo()
rs.add("localhost : 10004")

# 세컨더리 서버
db.printSlaveReplicationInfo()
# 새롭게 추가
localhost : 10004
# 해당 복제 서버 삭제
rs.remove( "localhost : 10004" )
db.printSlaveReplicationInfo()

################################################################
## 리프리카셋 멤버의 동기화
# 멤버들 간에 자동화된 동기화 방법
# 리프리카셋을 설정하게 되면 인스턴스를 활성화했을때 하나의 멤버와 다른 멤버와 동기화 되어있지않으면 자동으로 동기화
# 실습을 위해 DB종료, 데이터파일과 저널파일 삭제
# 세컨더리 서버를 실행했을때 프라이머리서버와 동기화 되어 있지 않은 경우 동기화 작업을 자동으로 수행
mongod --dbpath c:\mongodb\disk2 --port 10002 --replSet rptmongo --oplogSize 10
PORT 10001과 10002 Shutdown 
C:\mongdb\disk2 데이터파일과 저널 파일 삭제
C:\mongdb\disk1에서 C:\mongdb\disk2로 데이터파일과 저널 파일 복사
# 데이터를 복사하는 방법을 통해 동기화 작업을 수행하고 각 멤버의 인스턴스를 정장적으로 활성화할 수 있음

################################################################

