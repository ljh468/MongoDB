cd mongodb/bin
mongod --dbpath c:\mongodb\test
mongo
# 빠른 데이터검색을 수행하기 위함
# 인덱스를 생성하고 관리하는 방법
# Employees 컬렉션에 생성된 모든 인덱스를 출력
db.employees.getIndexes()

# 전체 인덱스 삭제
db.collection.dropIndexes()
db.employees.dropIndex( {ename : 1} )

#  인덱스 재구성
db.employees.createIndex({_id : 1})
db.employees.createIndex({comm : 1})
db.employees.reIndex()

## MongoDB에서 인덱스의 주요특징
# MongoDB는 대소문자를 엄격히 구분함
# Collection의 충분한 EXTENT 크기를 설정해야 하는 것처럼 충분한 인덱스 EXTENT크기를 설정해야함
# SORT() , LIMIT() 절을 적절하게 사용하는 것이 불필요한 데이터 검색을 피할수 있음 (성능 향상)
# 기본키 인덱스 Single-key, 복합키 인덱스 Compound key
db.employees.getIndexes()
db.employees.createIndex({empno : 1})
db.employees.createIndex({empno : 1 , deptno : -1})
db.employees.createIndex({deptno : 1})
db.employees.find({deptno : 10})
db.employees.find({deptno : 10}).explain()

# 다중키 인덱스
# 배열 값을 인덱싱
db.movie.createIndex({"리뷰.제목" : 1})
# 텍스트 인덱스
# $text 연산자로 쿼리가 가능
db.movie.createIndex({제목 : "text"})
# 해시 인덱스
# 값 일치가 중요한 필드를 인덱싱
db.movie.createIndex({배급사 : "hashed"})
# 인덱스 이름 정하기
# mongo는 알아서 이름을 정하지만 이름을 정할수 있음
db.movie.createIndex({배급사 : "hashed"}, {name : "배급사 해시 인덱스"})

# Non-Unique 인덱스와 Unique 인덱스
# 유일한 값이 저장되어 있는 필드에 생성하는 Unique 인덱스
db.employees.createIndex({empno : 1}, {unique : true})
# 중복된 값이 저장되어 있는필드에 생성하는 Non-Unique 인덱스
db.employees.createIndex({ename : 1})
db.employees.dropIndex({empno : 1})

# 인덱스 재생성 (Unique 인덱스 재생성)
db.employees.createIndex({empno : 1}, {unique : true}) 
db.employees.find({empno : 7369})
# 동일한 사원번호 입력시 에러 발생
db.employees.insert({empno : 7369, ename : "ADAM"})
# unique 인덱스를 삭제해야함 
db.employees.dropIndex({empno : 1})
db.employees.insert({empno : 7369, ename : "ADAM"})
db.employees.find({empno : 7369})

## Sparse 인덱스
# 검색대상 필드의 값이 전체 컬렉션에서 차지하는 밀도가 낮은 경우에 유리한 인덱스타입
db.movie.createIndex{
{제목 : 1},
{sparse : true, unique : true} )
db.employees.dropIndex({comm : 1})
# comm 필드의 값이 존재하는 Document들만으로 인덱스가 생성됨
db.employees.createIndex({comm : 1}, {sparse : true})
db.employees.find().sort({comm : -1})

# 부분 인덱스
# 일부 Document에 대해서만 인덱스키를 저장하는 인덱스
db.movie.createIndex( {제목 : 1}, { partialFilterExpression : { 제목 : "무제"} }

# Background 인덱스
# 시스템의 자원에 맞춰 인덱스를 생성해줌
# 시스템자원이 충분하지 않은 서버환경 또는 빅데이터 걸렉션에 대한 효율적인 딘덱스 생성이 요구되는 서버환경에서 적절하게 활용
db.employees.createIndex({ hiredate :1 }, {background : true})
db.employees.find({hiredate : "20-02-1981"})

# Covered 인덱스
# 조건에 만족하는 대상 필드만으로 Covered 인덱스를 생성하고 그인덱스만을 검색하여 조회
# 조건을 만족하는 데이터를 검색한 후 컬렉션에 대한 추가 검색을 통해 데이터를 검색
db.employees.createIndex({deptno : 1, ename : 1})
db.employees.find({deptno :10, ename : "CLARK"}, {_id : 0, ename : 1})

# GeoSpatial 인덱스
# 좌표로 구성되는 2차원 구조로 하나의 Collection에 하나의 2D Index를 생성할 수 있음
# 다양한 위치정보를 검색하는 경우 GeoSpatial 인덱스를 사용
# $near 비교 연산자
for(var i = 0; i< 100; i++) db.spatial.insert({pos : [ i % 10, Math.floor(i/10)]})
db.spatial.createIndex({pos : "2d"})
# 5, 5에가 가장 가까운 좌표 5개 뽑기
db.spatial.find({pos : {$near : [5, 5] } } ) .limit(5)

# $center 비교 연산자 ( 해당좌표기준 가장 가까운 원형 좌표를 검색 )
# center[ [x, y] , 반지름 ]
db.spatial.find({ pos : {$within : {$center : [ [5, 5], 2] }}}, {_id : 0})

# $box 비교 연산자( 해당좌표기준 가장 가까운 Box형 좌표를 검색 )
db.spatial.find({ pos : {$within : {$box : [ [ 5, 5], [6, 6] ] }}}, {_id : 0})

# $polygon 비교 연산자 ( 해당좌표기준 가장 가까운 다면형 좌표를 검색 )
db.spatial.find({ pos : {$within : {$polygon : [ [3, 3], [5, 7], [7, 4] ] }}}, {_id : 0})

# $centerSphere 비교연산자
db.tel_pos.save({moblile_no : "01087600001", 
last_pos : [ [127.0945116, 37.5353970],
[126.9815316, 37.5685375],
[127.0305035, 37.5017141] ] } )
db.tel_pos.createIndex( {last_pos : "2d"} )
# $centerSphere 연산자의 경우에는 해당 좌표를 기준으로 3Mile 내의 좌표를 검색하기 때문에 $within 연산자와 함께 검색해야함
db.tel_pos.find( { last_pos : { $within : 
{ $centerSphere : [ [ 127.0352915, 37.5360206], 30/3963] } } }, 
{_id : 0,  moblie_no : 1, last_pos : 1} )

# $nearSphere  비교연산자
# nearShpere 연산자의 경우에는 중복 조건을 만족하는 Document가 여러개면 모두 리턴
# 성수대교 좌표 [127.0352915, 37.5360206]을 기준으로 가장 가까운곳에서 통화했던 내역을 검색
db.tel_pos.find( { last_pos : 
{ $nearSphere : [127.0352915, 37.5360206] } } ,
{_id : 0, mobile_no : 1, last_pos : 1}).limit(2)

# GeoMetry 인덱스
# geoJSON은 직선, 곡선의 교차에 의하여 이루어지는 추상적인 구조나 다각형( Polygon ) 과 같은 기하학( geoMetry ) 구조를 일컫는 말이며 이러한 구조에 만들어지는 인덱스 구조
# Mongo는 Point타입, LineString타입, Polygon타입 3가지가 있음

# Point타입은 기준 좌표의 X범위 내의 포인터를 검색
# LineString타입은 출발지점과 도착지점사이에 선분 정보를 확인할 수 있음
# Polygon타입은 여러개의 좌표로 구획된 다각형 지리정보를 확인할 수 있음

## 사용자 생성과 관리
# OS 인증방식 : 접속 허용할 IP Address를 직접 지정하는 방법
# DB 인증방식 : 사전에 사용자ID와 암호를 생성하고 인증하는 방법
use admin
show users
db.createUser( { user : "system", 
pwd : "manager", 
roles : ["userAdminAnyDatabase", "dbAdminAnyDatabase", "readWritheAnyDatabase" ] } )
# system 계정으로 접속 가능여부를 확인
db.auth( { user : "system", pwd : "manager"} )
show users

use test
db.createUser( { user : "scott", 
pwd : "tiger", 
roles : ["dbAdmin", "readWrite" ] } )
show users
# 접속 가능여부를 확인
db.auth ( { user : "scott", pwd : "tiger" } )
# scott 사용자의 암호변경
db.changeUserPassword("scott", "ttt")
use admin
db.system.users.find()

## MongoDB에서 제공하는 사용자 권한 롤에는 4가지 유형이 있음
# Database User Role
# 가장 기본적인 권한으로 MongoDB 접속 및 해제할 수 있으면 Create, Update, Delete, Find 작업 가능

# DB Administration Role
# MongoDB를 기본적으로 관리할 수 있는 권한이 부여됨

# Administrative Role
# DB Administration Role권한과, 샤드(Shard)시스템과 복제(Replication)시스템을 구축 및 관리할 수 있는 권한이 부여됨

# Any Database Role
# MongoDB에서 제공하는 사용자 롤에서 최상위 권한들이 부여됨

# MongoDB구동시 반드시 -auth 파라미터를 이용하여 시작함
mongod --dbpath c:\mongodb\test --auth
# 접속 방법
mongo -u system -p manager admin

