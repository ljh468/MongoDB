cd mongodb/bin
mongod --dbpath c:\mongodb\test
mongo
# 빠른 데이터검색을 수행하기 위함
# 인덱스를 생성하고 관리하는 방법
# Employees 컬렉션에 생성된 모든 인덱스를 출력
db.employees.getIndexes()

# 전체 인덱스 삭제
db.collection.dropIndexes()

#  인덱스 재구성
db.employees.createIndex({_id : 1})
db.employees.createIndex({comm : 1})
db.employees.reIndex()

# MongoDB는 대소문자를 엄격히 구분함
# Collection의 충분한 EXTENT 크기를 설정해야 하는 것처럼 충분한 인덱스 EXTENT크기를 설정해야함
# SORT() , LIMIT() 절을 적절하게 사용하는 것이 불필요한 데이터 검색을 피할수 있음 (성능 향상)
# 기본키 인덱스 Single-key, 복합키 인덱스 Compound key
db.employees.getIndexes()
db.employees.createIndex({empno : 1})
db.employees.createIndex({empno : 1 , deptno : -1})
db.employees.createIndex({deptno : 1})
db.employees.find({deptno : 10})
db.employees.find({deptno : 10}).explain()

# 다중키 인덱스
db.movie.createIndex({"리뷰.제목" : 1})
# 텍스트 인덱스
# $text 연산자로 쿼리가 가능
db.movie.createIndex({제목 : "text"})
# 해시 인덱스
# 값 일치가 중요한 필드를 인덱싱
db.movie.createIndex({배급사 : "hashed"})
# 인덱스 이름 정하기
# mongo는 알아서 이름을 정하지만 이름을 정할수 있음
db.movie.createIndex({배급사 : "hashed"}, {name : "배급사 해시 인덱스"})

# Non-Unique 인덱스와 Unique 인덱스
# 유일한 값이 저장되어 있는 필드에 생성하는 Unique 인덱스
# 중복된 값이 저장되어 있는필드에 생성하는 Non-Unique 인덱스
db.employees.createIndex({empno : 1}, {unique : true})
db.employees.createIndex({ename : 1})
db.employees.dropIndex({empno : 1})

# 인덱스 재생성 (Unique 인덱스 재성성)
db.employees.createIndex({empno : 1}, {unique : true}) 
db.employees.find({empno : 7369})
# 동일한 사원번호 입력시 에러 발생
db.employees.insert({empno : 7369, ename : "ADAM"})
# 유니크 인덱스 삭제
db.employees.dropIndex({empno : 1})
db.employees.insert({empno : 7369, ename : "ADAM"})
db.employees.find({empno : 7369})
# Sparse 인덱스
# 검색대상 필드의 값이 전체 컬렉션에서 차지하는 밀도가 낮은 경우
db.movie.createIndex{
{제목 : 1},
{sparse : true, unique : true} )
db.employees.dropIndex({comm : 1})
# comm 필드의 값이 존재하는 Document들만으로 인덱스가 생성됨
db.employees.createIndex({comm : 1}, {sparse : true})
db.employees.find().sort({comm : -1})

# 부분 인덱스
# 일부 Document에 대해서만 인덱스키를 저장하는 인덱스
db.movie.createIndex( {제목 : 1}, { partialFilterExpression : { 제목 : "무제"} }

# Background 인덱스
# 시스템의 자원에 맞춰 인덱스를 생성해줌
db.employees.createIndex({ hiredate :1 }, {background : true})
db.employees.find({hiredate : "20-02-1981"})

# Covered 인덱스
# 조건에 만족하는 대상 필드만으로 Covered 인덱스를 생성하고 그인덱스만을 검색하여 조회
db.employees.createIndex({deptno : 1, ename : 1})
db.employees.find({deptno :10, ename : "CLARK"}, {_id : 0, ename : 1})

# GeoSpatial 인덱스
# 좌표로 구성되는 2차원 구조로 하나의 Collection에 하나의 2D Index를 생성할 수 있음
# 다양한 위치정보를 검색하는 경우 GeoSpatial 인덱스를 사용
for(var i = 0; i< 100; i++) db.spatial.insert({pos : [ i % 10, Math.floor(i/10)]})
db.spatial.createIndex({pos : "2d"})
# 5, 5에가 가장 가까운 좌표 5개 뽑기
db.spatial.find({pos : {$near : [5, 5] } } ) .limit(5)

# center 비교 연산자 ( 해당좌표기준 가장 가까운 원형 좌표를 검색 )
# center[ [x, y] , 반지름 ]
db.spatial.find({ pos : {$within : {$center : [ [5, 5], 2] }}}, {_id : 0})

# box 비교 연산자( 해당좌표기준 가장 가까운 Box형 좌표를 검색 )
db.spatial.find({ pos : {$within : {$box : [ [ 5, 5], [6, 6] ] }}}, {_id : 0})

# polygon 비교 연산자 ( 해당좌표기준 가장 가까운 다면형 좌표를 검색 )
db.spatial.find({ pos : {$within : {$polygon : [ [3, 3], [5, 7], [7, 4] ] }}}, {_id : 0})





