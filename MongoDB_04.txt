cd mongodb/bin
mongod --dbpath c:\mongodb\test
mongo
# 빠른 데이터검색을 수행하기 위함
# 인덱스를 생성하고 관리하는 방법
# Employees 컬렉션에 생성된 모든 인덱스를 출력
db.employees.getIndexes()

# 전체 인덱스 삭제
db.collection.dropIndexes()

#  인덱스 재구성
db.employees.createIndex({_id : 1})
db.employees.createIndex({comm : 1})
db.employees.reIndex()

# MongoDB는 대소문자를 엄격히 구분함
# Collection의 충분한 EXTENT 크기를 설정해야 하는 것처럼 충분한 인덱스 EXTENT크기를 설정해야함
# SORT() , LIMIT() 절을 적절하게 사용하는 것이 불필요한 데이터 검색을 피할수 있음 (성능 향상)
# 기본키 인덱스 Single-key, 복합키 인덱스 Compound key
db.employees.getIndexes()
db.employees.createIndex({empno : 1})
db.employees.createIndex({empno : 1 , deptno : -1})
db.employees.createIndex({deptno : 1})
db.employees.find({deptno : 10})
db.employees.find({deptno : 10}).explain()

# 다중키 인덱스
db.movie.createIndex({"리뷰.제목" : 1})
# 텍스트 인덱스
# $text 연산자로 쿼리가 가능
db.movie.createIndex({제목 : "text"})
# 해시 인덱스
# 값 일치가 중요한 필드를 인덱싱
db.movie.createIndex({배급사 : "hashed"})
# 인덱스 이름 정하기
# mongo는 알아서 이름을 정하지만 이름을 정할수 있음
db.movie.createIndex({배급사 : "hashed"}, {name : "배급사 해시 인덱스"})

# Non-Unique 인덱스와 Unique 인덱스
# 유일한 값이 저장되어 있는 필드에 생성하는 Unique 인덱스
# 중복된 값이 저장되어 있는필드에 생성하는 Non-Unique 인덱스
db.employees.createIndex({empno : 1}, {unique : true})
db.employees.createIndex({ename : 1})
db.employees.dropIndex({empno : 1})

# 인덱스 재생성 (Unique 인덱스 재성성)
db.employees.createIndex({empno : 1}, {unique : true}) 
db.employees.find({empno : 7369})
# 동일한 사원번호 입력시 에러 발생
db.employees.insert({empno : 7369, ename : "ADAM"})

